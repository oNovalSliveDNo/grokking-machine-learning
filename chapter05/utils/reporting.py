# chapter05/utils/reporting.py


def print_weights(weights, bias, feature_names, decision=2):
    """
    Выводит на экран веса модели и смещение в удобном формате.

    Параметры:
        weights (list или numpy.ndarray): Вектор весов модели
        bias (float): Значение смещения (bias) модели
        feature_names (list): Список названий признаков
        decision (int, optional): Количество знаков после запятой для округления. По умолчанию 2.

    Возвращает:
        None: Функция только выводит информацию на экран
    """
    # Создаем строку формата для вывода чисел с заданной точностью
    # Например, при decision=2 получим формат "{:.2f}"
    format_str = f"{{:.{decision}f}}"

    # Проходим по всем признакам и их весам одновременно
    # zip объединяет элементы из feature_names и weights попарно
    for name, weight in zip(feature_names, weights):

        # Форматируем вес признака в строку с заданным количеством знаков после запятой
        weight_str = format_str.format(weight)

        # Для положительных весов добавляем пробел перед числом для выравнивания
        # Это нужно потому, что у отрицательных чисел есть знак "-", который занимает место
        if weight >= 0:
            # Выводим вес с дополнительным пробелом перед положительным числом
            # \t - символ табуляции для выравнивания
            print(f'Вес «{name.lower()}»:\t {weight_str}')

        else:
            # Для отрицательных весов пробел не добавляем, так как знак "-" уже занимает место
            print(f'Вес «{name.lower()}»:\t{weight_str}')

    # Форматируем и выводим смещение (bias)
    bias_str = format_str.format(bias)

    # Выводим смещение с табуляцией для выравнивания с другими строками
    print(f'Смещение:\t{bias_str}')
