import streamlit as st
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from models.linear_regression import linear_regression, predict

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
np.random.seed(42)
rooms = np.random.randint(1, 6, 20)
prices = 50 * rooms + 100 + np.random.normal(0, 20, 20)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    trick = st.selectbox("–ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤", ["Simple", "Absolute", "Square"])
    error = st.selectbox("–§—É–Ω–∫—Ü–∏—è –æ—à–∏–±–∫–∏", ["MAE", "MSE", "RMSE"])
    mode = st.selectbox("–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", ["SGD", "Batch", "Mini"])
    learning_rate = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (Œ∑)", 0.001, 0.1, 0.01)
    epochs = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö", 100, 5000, 1000)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
price_per_room, base_price, errors = linear_regression(
    rooms, prices,
    trick=str(trick).lower(),
    error=str(error).lower(),
    mode=str(mode).lower(),
    learning_rate=learning_rate,
    epochs=epochs
)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã")
rooms_input = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", min_value=1, max_value=10, value=3)
predicted_price = predict(price_per_room, base_price, rooms_input)
st.write(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: **${predicted_price:.2f}**")

# –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
st.write(f"- –¶–µ–Ω–∞ –∑–∞ –∫–æ–º–Ω–∞—Ç—É: `{price_per_room:.2f}`")
st.write(f"- –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: `{base_price:.2f}`")

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
col1, col2 = st.columns(2)

# –ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –ª–∏–Ω–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
with col1:
    st.subheader("–ú–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ")

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ Plotly
    fig = go.Figure()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ—á–∫–∏)
    fig.add_trace(go.Scatter(
        x=rooms,
        y=prices,
        mode='markers',
        name='–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        marker=dict(color='blue', size=8)
    ))

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    x_range = np.linspace(1, 10, 100)
    y_pred = predict(price_per_room, base_price, x_range)
    fig.add_trace(go.Scatter(
        x=x_range,
        y=y_pred,
        mode='lines',
        name='–ú–æ–¥–µ–ª—å',
        line=dict(color='red', width=2)
    ))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    fig.update_layout(
        xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
        yaxis_title="–¶–µ–Ω–∞ ($)",
        legend=dict(orientation="h", yanchor="bottom", y=1.02),
        margin=dict(l=20, r=20, t=40, b=20)
    )

    st.plotly_chart(fig, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ
with col2:
    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–∫–∏")

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–∫–∏
    fig2 = go.Figure()

    fig2.add_trace(go.Scatter(
        x=np.arange(len(errors)),
        y=errors,
        mode='lines',
        name='–û—à–∏–±–∫–∞',
        line=dict(color='green', width=2)
    ))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    fig2.update_layout(
        xaxis_title="–≠–ø–æ—Ö–∞",
        yaxis_title=error,
        margin=dict(l=20, r=20, t=40, b=20)
    )

    st.plotly_chart(fig2, use_container_width=True)
